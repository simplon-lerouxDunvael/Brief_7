schedules:
  - cron: "0 * * * *" # cron syntax defining the schedule - every hour at 0'
    displayName: Hourly main schedule # friendly name given to a specific schedule
    branches:
      include: # which branches the schedule applies to
      - main 
#    exclude: # which branches to exclude from the schedule
#    - [string]
    always: false # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Kubernetes Service Connection'
    command: 'login'

- task: CmdLine@1
  inputs:
    script: |
      cat /home/vsts/version/version.vote
      mkdir /home/vsts/version
      pwd
      ls -la
      TESTVAR=$(curl 'https://hub.docker.com/v2/repositories/simplonasa/azure_voting_app/tags' | jq '."results"[0]["name"]')
      echo "$TESTVAR"|sed 's/^.//;s/.$//' >/home/vsts/version/version.vote
      cat /home/vsts/version/version.vote

      # Retrieve the value of the secret 
      SECRET_VALUE=$(Kubectl get secret version-secret -o jsonpath={.data.version} 2>/dev/null)
      if [ $? -ne 0 ]; then
        # Secret does not exist
        kubectl create secret generic version-secret --from-litteral=version=$TESTVAR
      elif [ "$TESTVAR" != "$SECRET_VALUE" ]; then
        # Update the secret with the new version number
        kubectl patch secret version-secret -p "{\data\":{\"version\":\"$TESTVAR\"}}"
      else
        echo "The version in the secret is the same as the verison found"
      fi

- task: Kubernetes@2
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Kubernetes Service Connection'
    command: 'apply'
    useConfigurationFile: true
    configuration: '/home/vsts/work/1/s/vote_renew.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  displayName: 'Run Voting App s version renewal'
  condition: and(succeeded), ne(variables['TESTVAR'], variables['SECRET_VALUE']))